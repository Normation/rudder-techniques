bundle agent setup_cronjob
{
  classes:
      "in_hours" expression => isgreaterthan("${system_common.agent_run_interval}","60");

  vars:
    in_hours::
      "interval_str" string => eval("${system_common.agent_run_interval} / 60", "math", "infix");
      "interval" string => format("%d", "${interval_str}");
      "steps" string => execresult("seq -s, 0 ${interval} 23", "useshell");
      "cron_prefix" string => "0 ${steps} * * *";

    !in_hours::
      "steps" string => execresult("seq -s, 0 ${system_common.agent_run_interval} 59", "useshell");
      "cron_prefix" string => "${steps} * * * *";

  files:

    !aix::
      "/etc/cron.d/rudder-agent"
        create          => "true",
        perms           => mog("644", "root", "0"),
        edit_defaults   => empty_backup,
        template_method => "mustache",
        edit_template   => "${sys.workdir}/inputs/common/cron/rudder-agent-community-cron";

    aix::
      "/var/spool/cron/crontabs/root"
        create        => "true",
        perms         => mog("600", "root", "cron"),
        edit_line     => insert_lines("${cron_prefix} /opt/rudder/bin/rudder agent check -q >> /var/log/rudder/agent-check/check.log 2>&1 # RUDDER CRON"),
        classes       => classes_generic("rudder_aix_crontab_insertion"),
        comment       => "Insert an AIX-compatible user crontab to run /opt/rudder/bin/rudder agent check";
}

#######################################################
# Check if the cron daemon is running
# This only works with unix flavoured systems too

bundle agent check_cron_daemon
{
  vars:

    redhat|fedora|slackware::
      "service_name" string => "crond";
    !(redhat|fedora|slackware)::
      "service_name" string => "cron";

  classes:

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:

    pass2.restart_crond::
      "restart_cron" usebundle => disable_reporting;
      "restart_cron" usebundle => _method_reporting_context("CRON Daemon", "None");
      "restart_cron" usebundle => service_restart("${service_name}");
      "restart_cron" usebundle => enable_reporting;

    # Fake success result, since we don't actually call service_restart unless it's needed
    pass2.!aix.!restart_crond::
      "any" usebundle => _classes_success("service_restart_${service_name}");

    pass3.!aix::
      "any" usebundle => rudder_common_reports_generic("Common", "service_restart_${service_name}", "${system_common.directiveId}", "CRON Daemon", "None", "Cron daemon status");

    aix::
      "any" usebundle => rudder_common_report("Common", "result_na", "${system_common.directiveId}", "CRON Daemon", "None", "CRON is not a service on AIX: CRON verifications skipped");

  processes:

    !aix::
      "cron"
        process_select => cron_bin,
        restart_class => "restart_crond";

}
