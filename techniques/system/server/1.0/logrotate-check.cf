#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

bundle agent root_logrotate_check
{
  vars:

      "syslog_user"      string => "root";
      "syslog_group"     string => "root";
      "syslog_file_mode" string => "640";

      "service_restart_utility" string => "/sbin/service";
      "apache_service_name"     string => "apache2";
      "syslog_service_name"     string => "rsyslog";
      "syslog_rotation_method"  string => "reload";

    pass1.!duration_configured::
      "logrotate_duration" string => "30";
    pass1.duration_configured::
      "logrotate_duration" string => "${rudder_parameters.log_duration}";

    ubuntu::
      "syslog_user"             string => "syslog";
    debian::
      "syslog_group"            string => "adm";

    redhat::
      "apache_service_name"     string => "httpd";
    SuSE::
      "syslog_service_name"     string => "syslog";

    debian|ubuntu::
      "service_restart_utility" string => "/usr/sbin/service";

    debian::
      "syslog_rotation_method"  string => "rotate";

  classes:
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "duration_configured" expression => isvariable("rudder_parameters.log_duration");

  files:
    pass2::
      "/etc/logrotate.d/rudder"
        create        => "true",
        edit_defaults => empty_backup,
        edit_template => "${sys.workdir}/inputs/server/logrotate.conf/rudder",
        classes       => kept_if_else("rudder_logrotate_conf_ok", "rudder_logrotate_conf_copied", "cannot_copy_rudder_logrotate_conf"),
        comment       => "Copying the Rudder logrotate configuration";

  methods:
    rudder_logrotate_conf_ok.!rudder_logrotate_conf_copied.!cannot_copy_rudder_logrotate_conf::
      "any" usebundle => rudder_common_report("server", "result_success", "${server_common.directiveId}", "Check logrotate configuration", "None", "The logrotate configuration is correct");

    rudder_logrotate_conf_copied.!cannot_copy_rudder_logrotate_conf::
      "any" usebundle => rudder_common_report("server", "result_repaired", "${server_common.directiveId}", "Check logrotate configuration", "None", "The logrotate configuration has been repaired");

    cannot_copy_rudder_logrotate_conf::
      "any" usebundle => rudder_common_report("server", "result_error", "${server_common.directiveId}", "Check logrotate configuration", "None", "The logrotate configuration could not be repaired");
}
