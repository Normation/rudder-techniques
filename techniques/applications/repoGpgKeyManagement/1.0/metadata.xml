<!--

 Copyright (c) 2015 Janos Mattyasovszky

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Based on the Template:
  https://github.com/Normation/rudder-techniques/blob/2c4e7fb50f0f35d786f253ca446f855b91a9ff2e/technique-metadata-sample.xml

-->

<TECHNIQUE name="Package repository keys (RPM/APT)">

  <!-- This description is displayed in detailed views in the interface.
     It should be used to describe what this Technique does, in detail.
     New lines will be ignored. -->
  <DESCRIPTION>
   Manages trusted GPG Keys for the RPM / zypper / APT Package Managers.
   It uses `rpm --import' and `apt-key add' to load, and `rpm -e' and `apt-key remove' to remove keys.
   You can use multiple instances of Directives based on this Technique, but keep in mind:
   when conflicting actions are specified on the same hash by different directives, it will flip-flop!
  </DESCRIPTION>

  <!-- Can several Directives based on this Technique be applied to the same node?
     If so, the Technique will have to be written to support multi-valued variables.
     -->
  <MULTIINSTANCE>true</MULTIINSTANCE>

  <!-- List of .st files (also called templates or TMLS)
     in this Technique to import and parse variables in.
     Note: the ".st" extension will be added automatically, don't specify it here -->
  <TMLS>
    <TML name="repoGpgKeyManagement"/>
  </TMLS>

  <!-- List of CFEngine bundles in the above .st TMLS to call.
     These will be added to the CFEngine bundlesequence.
       Technically, they don't have to have the same name as the
     TML, but if there is one bundle per TML, it is recommended. -->
  <BUNDLES>
    <NAME>check_repo_gpg_key</NAME>
  </BUNDLES>

  <!-- Define agent and OS compatibility for this Technique.
     Currently, this is for information purposes only.
     ## TODO: It has not been tested on any older OS, only on latest-greatest (SLES11, CentOS 7, Ubuntu 14)
  <COMPATIBLE>
    <OS version=">= 5">RHEL</OS>
    <OS version=">= 11">SuSE Linux</OS>
    <OS version=">= 4 (Etch)">Debian</OS>
    <OS version=">= 5">RHEL / CentOS</OS>
  </COMPATIBLE>
-->

  <TRACKINGVARIABLE>
    <SAMESIZEAS>GPG_KEY_HASH</SAMESIZEAS>
  </TRACKINGVARIABLE>

  <!-- From here on, define variables to display in the web interface
     All variables must be contained in a section.
     Sections may be multivalued, or not -->
 <SECTIONS>
   <SECTION name="Repository GPG Key Management" multivalued="true" component="true" componentKey="GPG_KEY_HASH">
     <SELECT1>
       <NAME>GPG_KEY_ACTION</NAME>
       <DESCRIPTION>Which operation should be done with this GPG Key</DESCRIPTION>
       <ITEM>
         <LABEL>Import (both hash and key content required)</LABEL>
         <VALUE>add</VALUE>
       </ITEM>
       <ITEM>
         <LABEL>Remove (only hash is required)</LABEL>
         <VALUE>del</VALUE>
       </ITEM>
       <CONSTRAINT>
         <DEFAULT>add</DEFAULT>
       </CONSTRAINT>
     </SELECT1>
     <INPUT>
       <NAME>GPG_KEY_HASH</NAME>
       <CONSTRAINT>
         <MAYBEEMPTY>false</MAYBEEMPTY>
         <REGEX error="Exactly 16 hexadecimal characters required"><![CDATA[ [a-fA-F0-9]{16} ]]></REGEX>
       </CONSTRAINT>
       <DESCRIPTION>Long hash of the GPG Key</DESCRIPTION>
       <LONGDESCRIPTION>
        You get it by looking for a line like `pub   2048R/70AF9E8139DB7C82 2013-01-31' when using the command `gpg --list-keys --keyid-format=long'.
        From that, fill in the 16 hexa-chars part like `70AF9E8139DB7C82' in the example.
       </LONGDESCRIPTION>
     </INPUT>
     <INPUT>
       <NAME>GPG_KEY_NAME</NAME>
       <CONSTRAINT>
         <MAYBEEMPTY>true</MAYBEEMPTY>
         <REGEX error="No double quotation marks"><![CDATA[ [^"]* ]]></REGEX>
       </CONSTRAINT>
       <DESCRIPTION>Description of Key</DESCRIPTION>
       <LONGDESCRIPTION>This is only used to identify the Key in the GUI, it has no role in adding/removing the Key on the systems</LONGDESCRIPTION>
     </INPUT>
     <INPUT>
       <NAME>GPG_KEY_CONTENT</NAME>
       <CONSTRAINT>
         <MAYBEEMPTY>true</MAYBEEMPTY>
         <TYPE>textarea</TYPE>
         <REGEX error="Need the whole part of PGP PUBLIC KEY BLOCK, as exported by `gpg -a --export'">
           <![CDATA[ \s*-----BEGIN PGP PUBLIC KEY BLOCK-----[^'"\\]+-----END PGP PUBLIC KEY BLOCK-----\s* ]]>
         </REGEX>
       </CONSTRAINT>
       <DESCRIPTION>The whole section of PGP PUBLIC KEY BLOCK (Only required when Importing a key)</DESCRIPTION>
       <LONGDESCRIPTION>Use the command `gpg -a --export' to export the public key and paste the whole output here</LONGDESCRIPTION>
     </INPUT>
 </SECTION>
</SECTIONS>
</TECHNIQUE>
