#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

#
# Define what an agent has to do when it updates
# its promises
#

#simple copy method
body copy_from remote(server, path)
{

        servers => {
      "${server}"
    };
        encrypt  => "true";
        trustkey => "true";
        source   => "${path}";
        compare  => "digest";
        preserve => "true"; #preserver permissions
        verify   => "true";
        purge    => "false";
        owners   => {"root"};
    community_edition::
        portnumber => "5309";

}

bundle common server_info
{
  vars:
    any::
      "cfserved" string      => "%%POLICY_SERVER_HOSTNAME%%";
      "policy_files" string  => "/var/rudder/share/root";   #directory where to look for promises in the server for that client
}

bundle agent update
{
  vars:
      "client_inputs" string => "${sys.workdir}/inputs";  #where to put the files on the client when downloaded
    nova_edition::
      "server_inputs" string => "${server_info.policy_files}/rules/cfengine-nova"; #actual directory with promises
    community_edition::
      "server_inputs" string => "${server_info.policy_files}/rules/cfengine-community"; #actual directory with promises


  files:
    !root_server::
      "${g.rudder_dependencies}"
        copy_from    => remote("${server_info.cfserved}", "${g.rudder_dependencies}"),
        depth_search => recurse("inf"),
        action => immediate,
        classes => success("rudder_dependencies_updated_ok", "rudder_dependencies_update_error");

      "${client_inputs}"
        copy_from    => remote("${server_info.cfserved}","${server_inputs}"),
        depth_search => recurse("inf"),
        action => immediate,
        classes => success("config", "no_update");


  processes:
    config::
      "cf-serverd"  restart_class => "start_server";

    config.!windows::
      "cf-execd" restart_class => "start_exec";

  commands:
    start_exec.!windows::
      "${sys.cf_execd}",
        action => u_ifwin_bg,
        classes => outcome("executor");

    start_exec.cygwin::
      "${sys.cf_execd}",
        action => u_ifwin_bg,
        classes => outcome("executor");

    start_server::
      "${sys.cf_serverd}",
        action => u_ifwin_bg,
        classes => outcome("server");

#########################################################
  services:
    config.windows::
      "CfengineNovaExec"
        service_policy => "start",
        service_method => u_bootstart,
        classes => outcome("executor"),
        comment => "Start the executor windows service now and at boot time";
  reports:
    server_ok::
      "@@HasPolicyServer@@Inform@@hasPolicyServer-root#@common-root##${g.uuid}@#Started the server - system ready to serve";
    executor_ok::
      "@@HasPolicyServer@@Inform@@hasPolicyServer-root#@common-root##${g.uuid}@#Started the scheduler - system functional";

    no_update::
      "@@HasPolicyServer@@Error@@hasPolicyServer-root#@common-root##${g.uuid}@#Cannot update policy files";
    rudder_dependencies_update_error::
      "@@HasPolicyServer@@Error@@hasPolicyServer-root#@common-root##${g.uuid}@#Cannot update dependencies";
}


############################################
body classes outcome(x)
{
        promise_repaired => {"${x}_ok"};
}
############################################
body action u_background
{
        background => "true";
}
############################################
body classes success(if, else)
{
        promise_repaired => {"${if}"};
        repair_failed => { "${else}" };
        repair_denied => { "${else}" };
        repair_timeout => { "${else}" };
}

############################################
body action u_ifwin_bg
{
    windows::
        background => "true";
}

body service_method u_bootstart
{
        service_autostart_policy => "boot_time";
}
