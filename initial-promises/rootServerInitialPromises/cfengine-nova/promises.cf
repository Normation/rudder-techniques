#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

#######################################################
#
# promises.cf
#
#######################################################
body common control
{

        inputs => {
      "common/site.cf", "common/update.cf", "common/process_matching.cf", "common/cfengine_stdlib.cf",  "common/rudder_stdlib.cf", "common/cf-served.cf","common/library.cf","common/core-lib.cf", "distributePolicy/propagatePromises.cf", "distributePolicy/rsyslogConf.cf", "distributePolicy/initCheck.cf", "distributePolicy/postgresCheck.cf", "distributePolicy/logrotateCheck.cf", "distributePolicy/integrityCheck.cf", "distributePolicy/apacheCheck.cf", "distributePolicy/ldapCheck.cf", "distributePolicy/aliveCheck.cf"
    };

        bundlesequence => { @{va.bs} , "setup_debian_backports", "install_rsyslogd", "propagatePromises", "sendInventoryToCmdb", "root_init_check", "root_postgres_check", "root_logrotate_check", "root_integrity_check", "root_apache_webdav_check", "root_ldap_check", "root_alive_check" };

        output_prefix => "rudder";

        host_licenses_paid => "%%POLICY_SERVER_LICENSES_PAID%%";

}

bundle common va
{
  vars:
      "bs" slist => { "clean_red_button", "set_red_button", "update", "process_matching", "check_cf_processes", "check_uuid"
    #,  "executor"
     };

# definition of the machine roles
  classes:
      "root_server" expression => "any";
      "policy_server" expression => "any";
}


##########################################################
# Red Button part.
# When the file ${sys.workdir}/inputs/stop exists, we must stop the
# execution of the agent on all client machines
##########################################################
bundle agent clean_red_button()
{
  commands:
    safe.policy_server::
      "${sys.workdir}/bin/cf-runagent"
        args => "-Dsafe",
        comment => "Propagate the safe information to children";

  files:
    safe.policy_server::
      "${g.rudder_var}/share/[a-f0-9A-F\-]+/rules/cfengine-(community|nova)/stopFile"
        delete => tidy,
        comment => "Deleting the stop file on clients promises, cfengine is good to go";

    safe.!policy_server::
      "${sys.workdir}/inputs/stopFile"
        delete => tidy,
        comment => "Deleting the stop file, cfengine is good to go";

  reports:
    safe::
      "@@Common@@Inform@@hasPolicyServer-root#@common-root##${g.uuid}@#Authorizing Cfengine to restart";
}

bundle agent set_red_button()
{
  classes:
    policy_server::
      "danger" expression => fileexists("${g.rudder_var}/share/root/stopFile");
  methods:
    danger::
      "any" usebundle => setStopFile;

    danger.policy_server::
      "any" usebundle => stopClients;
}

bundle agent setStopFile
{

  files:
    danger.!policy_server::
      "${sys.workdir}/inputs/stop"
        create => "true";
    danger.policy_server::
      "${g.rudder_var}/share/[a-f0-9A-F\-]+/rules/cfengine-(community|nova)/stopFile"
        create => "true";



  reports:
    danger.!policy_server::
      "@@Common@@Inform@@hasPolicyServer-root#@common-root##${g.uuid}@#Creating stop file";
    danger.policy_server::
      "@@Common@@Inform@@hasPolicyServer-root#@common-root##${g.uuid}@#Creating stop files for clients";

}

bundle agent stopClients
{
  classes:
    policy_server::
      "danger" expression => fileexists("${g.rudder_var}/share/root/stopFile");

  commands:
    danger.policy_server::
      "${sys.workdir}/bin/cf-runagent"
        args => "-Ddanger",
        comment => "Propagate the danger information to children";

  reports:
    danger.policy_server::
      "@@Common@@Inform@@hasPolicyServer-root#@common-root##${g.uuid}@#gStopping all Cfengine operation";

}

bundle agent check_red_button_status()
{
  classes:
    !policy_server::
      "should_not_continue" expression => fileexists("${sys.workdir}/inputs/stopFile");
}


###################################################
# Check that CFengine services are up
###################################################
bundle agent check_cf_processes
{

  processes:

      "${sys.workdir}/bin/cf-serverd"  restart_class => "start_server";
      "${sys.workdir}/bin/cf-execd"    restart_class => "start_executor";

  commands:

    start_server::
      "${sys.cf_serverd}",
        action => u_ifwin_bg,
        classes => outcome("server");

    start_executor::
      "${sys.cf_execd}",
        action => u_ifwin_bg,
        classes => outcome("executor");

}

#######################################################
# UUID file enforcing

bundle agent check_uuid
{
  files:
      "${g.uuid_file}"
        create    => "true",
        edit_line => enforce_content("${g.uuid}"),
        edit_defaults => empty_backup,
        perms => m("644"),
        comment => "Setting the uuid variable in a machine";

}

#######################################################

body agent control
{
    # if default runtime is 5 mins we need this for long jobs
        ifelapsed => "1";

    #define here some environment variables
        environment => { "DEBIAN_FRONTEND=noninteractive" };

        agentfacility => "LOG_LOCAL6";

}

#######################################################

body executor control
{
        splaytime => "1";

        exec_command => "${sys.workdir}/bin/cf-agent -f failsafe.cf && ${sys.workdir}/bin/cf-agent";
        schedule         => { "Min00", "Min05", "Min10", "Min15", "Min20", "Min25", "Min30", "Min35", "Min40", "Min45", "Min50", "Min55" };
        executorfacility => "LOG_DAEMON";
}

# Not currently used
bundle agent executor
{
#    processes:
#        linux.!nova_edition::
#            "cf-execd"
#                restart_class => "start_cfexecd";  #call a class

#    commands:
#        start_cfexecd::  #define a class
#            "/var/cfengine/bin/cf-execd";l

  files:
    linux.!nova_edition::
      "${g.crontab}"
        create      => "true",
        edit_line   => upgrade_cfexecd;
}
########################################################


# Not currently used
bundle edit_line upgrade_cfexecd
{
  classes:
      "exec_fix" not => regline(".*cf-execd.*","${edit.filename}");

  insert_lines:
    exec_fix::
      "0,5,10,15,20,25,30,35,40,45,50,55 * * * * /var/cfengine/bin/cf-execd -F";

  reports:
    exec_fix::
      "Added a 5 minute schedule to crontabs to verify cf-execd is up";
}


#######################################################

body reporter control
{
        reports => { "classes", "audit", "all_locks", "hashes", "performance", "last_seen", "monitor_history" };
        build_directory => "${sys.workdir}/reports";
        report_output => "xml";
}

#######################################################


#Enforce that the file only contains this information
bundle edit_line enforce_content(str)
{

  delete_lines:
      "${str}" not_matching => "true";

  insert_lines:
      "${str}";
}

