#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

bundle agent internal_security
{
  vars:

    !windows::

      "mode" string => "600";
      "user" string => "root";
      "group" string => "0";

    #windows::

    #	"mode" string => "755";
    #	"user" string => "Administrator";
    #	"group" string => "Administrators";

  files:

    !windows::

      "${g.rudder_var}/cfengine-community/inputs"
        depth_search => recurse("inf"),
        perms => mog("${mode}", "${user}", "${group}"),
        classes => kept_if_else("security_sanitization_ok", "security_sanitization_repaired", "security_sanitization_failed");

      "${g.rudder_var}/cfengine-community/inputs"
        perms => mog("${mode}", "${user}", "${group}"),
        classes => kept_if_else("security_sanitization_ok", "security_sanitization_repaired", "security_sanitization_failed");

      "${g.rudder_var}/cfengine-community/ppkeys"
        depth_search => recurse("inf"),
        perms => mog("${mode}", "${user}", "${group}"),
        classes => kept_if_else("security_sanitization_ok", "security_sanitization_repaired", "security_sanitization_failed");

      "${g.rudder_var}/cfengine-community/ppkeys"
        perms => mog("${mode}", "${user}", "${group}"),
        classes => kept_if_else("security_sanitization_ok", "security_sanitization_repaired", "security_sanitization_failed");

  reports:

    security_sanitization_ok.!security_sanitization_repaired::

      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@Security parameters@@None@@${g.execRun}##${g.uuid}@#The internal environment security is acceptable";

    security_sanitization_repaired::

      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@Security parameters@@None@@${g.execRun}##${g.uuid}@#Some internal security parameters were adjusted";

    security_sanitization_failed::

      "@@Common@@result_error@@hasPolicyServer-root@@common-root@@00@@Security parameters@@None@@${g.execRun}##${g.uuid}@#The internal environment security is NOT acceptable!";

    windows::

      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@Security parameters@@None@@${g.execRun}##${g.uuid}@#No internal security parameters defined for Windows OSes yet";

}
