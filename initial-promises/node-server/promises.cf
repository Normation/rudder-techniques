#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

#######################################################
#
# promises.cf
#
#######################################################
bundle common rudder_roles
{

  vars:
    windows.!cygwin::
      "rudder_base" string  => "${sys.winprogdir}\Rudder";
      "uuid_file" string => "${rudder_base}\etc\uuid.hive";

    !windows.!android::
      "rudder_base" string => "/opt/rudder";
      "uuid_file" string => "${rudder_base}/etc/uuid.hive";

    android::
      "rudder_base" string => "/data/rudder";
      "uuid_file" string => "${rudder_base}/etc/uuid.hive";

    any::
      "uuid" string => readfile("${uuid_file}", 60);

  classes:
        # Abort if no uuid is defined
      "should_not_continue" not => fileexists("${uuid_file}");
}

body common control
{

    any::
        output_prefix => "rudder";

        inputs => {
  @{va.inputs_list}
    };

    policy_server::

        bundlesequence => { @{va.bs}, "install_rsyslogd", "propagatePromises", "root_component_check", "fetchFusionTools", "virtualMachines", "doInventory", "sendInventoryToCmdb", @{va.end}};

    !policy_server::

        bundlesequence => { @{va.bs} , "fetchFusionTools", "virtualMachines", "doInventory" , @{va.end}};

}

bundle common va
{

  vars:
    policy_server::
      "bs" slist => { "startExecution", "check_disable_agent", "clean_red_button", "update", "set_red_button", "internal_security", "process_matching", "check_cf_processes", "check_uuid", "check_cron_daemon", "garbage_collection", "check_binaries_freshness"
     };

      "inputs_list" slist => {
        @(va.common_inputs),"distributePolicy/1.0/propagatePromises.cf","distributePolicy/1.0/rsyslogConf.cf","server-roles/1.0/init-check.cf","server-roles/1.0/postgres-check.cf","server-roles/1.0/logrotate-check.cf", "server-roles/1.0/servers-by-role.cf", "server-roles/1.0/integrity-check.cf","server-roles/1.0/technique-reload.cf","server-roles/1.0/network-check.cf","server-roles/1.0/alive-check.cf","server-roles/1.0/password-check.cf", "server-roles/1.0/component-check.cf"
     };

    !policy_server::
      "bs" slist => { "startExecution", "check_disable_agent", "update", "internal_security", "process_matching", "check_cf_processes", "check_cron_daemon", "garbage_collection", "check_binaries_freshness"
     };

      "inputs_list" slist => {
        @{va.common_inputs}
     };

    any::
      "end" slist => { "endExecution" };

      "common_inputs" slist => {
      "common/1.0/cf-served.cf","common/1.0/cfengine_stdlib.cf","common/1.0/rudder_stdlib.cf","common/1.0/rudder_lib.cf","common/1.0/process_matching.cf","common/1.0/internal_security.cf","common/1.0/site.cf","common/1.0/update.cf","inventory/1.0/fetchFusionTools.cf","inventory/1.0/virtualMachines.cf","inventory/1.0/fusionAgent.cf"
     };

# definition of the machine roles
  classes:
        # Policy Server is a machine which delivers promises
        "policy_server" expression => strcmp("root", "${rudder_roles.uuid}");
        # Root Server is the top policy server machine
        "root_server"   expression => strcmp("root", "${rudder_roles.uuid}");
}

#########################################################
# Control execution
#########################################################
bundle agent startExecution
{
  reports:
    cfengine_3::
      "@@Common@@log_info@@hasPolicyServer-root@@common-root@@00@@common@@StartRun@@${g.execRun}##${g.uuid}@#Start execution";
}

bundle agent endExecution
{
  reports:
    cfengine_3::
      "@@Common@@log_info@@hasPolicyServer-root@@common-root@@00@@common@@EndRun@@${g.execRun}##${g.uuid}@#End execution";

    rudder_promises_generated_error|no_update::
  "*********************************************************************************
* rudder-agent could not get an updated configuration from the policy server.   *
* This can be caused by a network issue, an unavailable server, or if this      *
* node has not yet been accepted in the Rudder root server.                     *
*********************************************************************************";
}


##########################################################
# Check for "disable-agent" file and cleanly stop and
# warn about this if it is present
##########################################################
bundle agent check_disable_agent
{
  vars:
      "components" slist => { "cf-serverd", "cf-execd", "cf-monitord" };

  classes:
      "should_disable_agent" expression => fileexists("${g.rudder_disable_agent_file}");

      # Only define this class when we're ready to die - this is a special class name in "abortclasses"
      "should_not_continue"
        expression => "should_disable_agent",
        ifvarclass => "abort_report_done";

  processes:
    should_disable_agent::
      "${sys.workdir}/bin/${components}"
        signals       => { "term", "kill" };

  reports:
    should_disable_agent::
      "FATAL: The file ${g.rudder_disable_agent_file} is present. Rudder will kill all running daemons and halt immediately."
        classes => if_ok("abort_report_done");

}

##########################################################
# Red Button part.
# When the file ${sys.workdir}/inputs/stop exists, we must stop the
# execution of the agent on all client machines
##########################################################
bundle agent clean_red_button()
{
  commands:
    safe.policy_server::
      "${sys.workdir}/bin/cf-runagent"
        args => "-Dsafe",
        comment => "Propagate the safe information to children";

  files:
    safe.policy_server::
      "${g.rudder_var}/share/[a-f0-9A-F\-]+/rules/cfengine-(community|nova)/stopFile"
        delete => tidy,
        comment => "Deleting the stop file on clients promises, cfengine is good to go";

    safe.!policy_server::
      "${sys.workdir}/inputs/stopFile"
        delete => tidy,
        comment => "Deleting the stop file, cfengine is good to go";

  reports:
    safe::
      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@Red Button@@None@@${g.execRun}##${g.uuid}@#Authorizing Cfengine to restart";
}

bundle agent set_red_button()
{
  classes:
    policy_server::
      "danger" expression => fileexists("${g.rudder_var}/share/root/stopFile");
  methods:
    danger::
      "any" usebundle => setStopFile;

    danger.policy_server::
      "any" usebundle => stopClients;
}

bundle agent setStopFile
{
  files:
    danger.!policy_server::
      "${sys.workdir}/inputs/stopFile"
        create => "true";
    danger.policy_server::
      "${g.rudder_var}/share/[a-f0-9A-F\-]+/rules/cfengine-(community|nova)/stopFile"
        create => "true";

  reports:
    danger.!policy_server::
      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@00@@Red Button@@None@@${g.execRun}##${g.uuid}@#Creating local stop file for this node";
    danger.policy_server::
      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@Red Button@@None@@${g.execRun}##${g.uuid}@#Creating stop files for all clients of this policy server";

}

bundle agent stopClients
{
  classes:
    policy_server::
      "danger" expression => fileexists("${g.rudder_var}/share/root/stopFile");

  commands:
    danger.policy_server::
      "${sys.workdir}/bin/cf-runagent"
        args => "-Ddanger",
        comment => "Propagate the danger information to children";

  reports:
    danger.policy_server::
      "@@Common@@log_repaired@@hasPolicyServer-root@@common-root@@00@@Red Button@@None@@${g.execRun}##${g.uuid}@#Actively stopping CFEngine operations on all clients of this policy server (via cf-runagent)";

}

bundle agent check_red_button_status()
{
  classes:
    !policy_server::
      "should_not_continue" expression => fileexists("${sys.workdir}/inputs/stopFile");

  reports:
    !should_not_continue::
      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@Red Button@@None@@${g.execRun}##${g.uuid}@#Red Button is not in effect, continuing as normal...";

}


###################################################
# Check that CFengine services are up
###################################################
bundle agent check_cf_processes
{

  processes:

    !windows::

      "${sys.workdir}/bin/cf-serverd"  restart_class => "start_server";
      "${sys.workdir}/bin/cf-execd"    restart_class => "start_executor";

    # If there is more than 2 cf-execd's, it means cf-execd is starting to
    # go crazy, so we ask politely to these processes to shut down.
      "${sys.workdir}/bin/cf-execd"
        process_count => check_range("execd", "0","2"),
        signals => { "term" },
        classes => if_repaired("execd_has_gone_wild"),
        comment => "Checking if cf-execd has gone wild";

    # The same when there is more than 5 cf-agents
      "${sys.workdir}/bin/cf-agent"
        process_count => check_range("agent", "0","5"),
        signals => { "term" },
        classes => if_repaired("agent_has_gone_wild"),
        comment => "Checking if cf-agent has gone wild";

    # If there is more than 5 cf-execd's/cf-agents, it means that they are really
    # going crazy. Let's be a bit less polite and more violent about killing them.
    #
    # These two promises overlap, because when you go past the 5-limit treshold,
    # you still leave a chance for them to die with SIGTERM before the SIGKILL.
    #
    # Reason: The backend databases that stores the classes and some runtime
    # parameters do really not appreciate beeing killed violently and may prevent
    # the agent from operating properly.

      "${sys.workdir}/bin/cf-execd"
        process_count => check_range("execd", "0","5"),
        signals => { "kill" },
        classes => if_repaired("execd_has_gone_really_wild"),
        comment => "Checking if cf-execd has gone really wild";

      "${sys.workdir}/bin/cf-agent"
        process_count => check_range("agent", "0","8"),
        signals => { "kill" },
        classes => if_repaired("agent_has_gone_really_wild"),
        comment => "Checking if cf-agent has gone really wild";

    windows::

    # Windows does only implement SIGTERM. Using SIGKILL here makes no sense

      "cf-agent"
        process_count => check_range("agent", "0","5"),
        signals => { "term" },
        classes => if_repaired("agent_has_gone_wild"),
        comment => "Checking if cf-agent has gone wild";

  services:
    # By design, there can be only one cf-execd service running on Windows
    windows::
      "CfengineNovaExec"
        service_policy => "start",
        service_method => u_bootstart,
        comment => "Start the executor windows service now and at boot time";

  commands:

    start_server::
      "${sys.cf_serverd}"
        action => u_ifwin_bg,
        classes => outcome("server");

    start_executor::
      "${sys.cf_execd}"
        action => u_ifwin_bg,
        classes => outcome("executor");

  reports:

    !execd_has_gone_wild.!execd_has_gone_really_wild.!agent_has_gone_wild.!agent_has_gone_really_wild::

      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@Process checking@@None@@${g.execRun}##${g.uuid}@#There is an acceptable number of cf-execd processes (between 0 and 2) and cf-agent processes (between 0 and 5)";

    execd_has_gone_wild.!execd_has_gone_really_wild::

      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@Process checking@@None@@${g.execRun}##${g.uuid}@#Warning, more than 2 cf-execd processes were detected. They have been sent a graceful termination signal.";

    execd_has_gone_really_wild::

      "@@Common@@result_error@@hasPolicyServer-root@@common-root@@00@@Process checking@@None@@${g.execRun}##${g.uuid}@#ALERT: more than 5 cf-execd processes were detected. Killing processes that do not respect graceful termination signals.";

    agent_has_gone_wild.!agent_has_gone_really_wild::

      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@Process checking@@None@@${g.execRun}##${g.uuid}@#Warning, more than 5 cf-agent processes were detected. They have been sent a graceful termination signal.";

    agent_has_gone_really_wild::

      "@@Common@@result_error@@hasPolicyServer-root@@common-root@@00@@Process checking@@None@@${g.execRun}##${g.uuid}@#ALERT: more than 8 cf-agent processes were detected. Killing processes that do not respect graceful termination signals.";

}

#######################################################
# UUID file enforcing

bundle agent check_uuid
{
  files:
      "${g.uuid_file}"
        create    => "true",
        edit_line => enforce_content("${g.uuid}"),
        edit_defaults => noempty_backup,
        perms => m("644"),
        comment => "Setting the uuid variable in a machine";

}

#######################################################
# Check if the cron daemon is running
# This only works with unix flavoured systems too

bundle agent check_cron_daemon
{

  vars:

    redhat::
      "cron_bin" string => "crond$";
      "cron_restartcmd" string => "/etc/init.d/crond restart";

    ubuntu::
      "cron_bin" string => "cron$";
      "cron_restartcmd" string => "/etc/init.d/cron restart";

    !(redhat|ubuntu)::
      "cron_bin" string => "/usr/sbin/cron$";
      "cron_restartcmd" string => "/etc/init.d/cron restart";

  processes:

    !android.!windows::
      "${cron_bin}"
        restart_class => "restart_crond";

  commands:

    restart_crond::

      "${cron_restartcmd}"

        comment => "Restarting crond",
        classes => kept_if_else("crond_ok", "crond_restarted" , "crond_failed");

  reports:

    crond_failed::
      "@@Common@@result_error@@hasPolicyServer-root@@common-root@@00@@CRON Daemon@@None@@${g.execRun}##${g.uuid}@#The CRON daemon was not running and could not be restarted";

    crond_restarted::
      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@CRON Daemon@@None@@${g.execRun}##${g.uuid}@#The CRON daemon has been successfully restarted";

    !restart_crond.!crond_restarted.!crond_failed.!android::
      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@CRON Daemon@@None@@${g.execRun}##${g.uuid}@#The CRON daemon is running";

    android|windows::
       "@@Common@@result_na@@hasPolicyServer-root@@common-root@@00@CRON Daemon@@None@@${g.execRun}##${g.uuid}@#This is a system without CRON: CRON verifications skipped !";

}

########################################################
# Trash every output report older than 30 days         #
########################################################

bundle agent garbage_collection
{

  files:

      "${sys.workdir}/outputs"

        delete => tidy,
        file_select => days_old("7"),
        depth_search => recurse("inf");

      "${g.rudder_var}/modified-files"

        delete => tidy,
        file_select => days_old("30"),
        depth_search => recurse("inf");

}

#######################################################
# Copy the CFengine binaries from the /opt repository
# to the CFengine working directory

bundle agent check_binaries_freshness
{

  vars:

    community_edition::

      "components" slist => { "cf-agent", "cf-serverd", "cf-execd", "cf-monitord", "cf-promises", "cf-runagent", "cf-key", "rpmvercmp" };

  files:

    !android.!nova_edition::
      "${sys.workdir}/bin/${components}"
        perms => u_p("700"),
        copy_from => cp("${g.rudder_bin}/${components}", "localhost"),
        classes => kept_if_else("binaries_fresh", "binaries_rotten", "binaries_missing"),
        action => immediate,
        comment => "Copying the CFengine binaries from ${g.rudder_sbin}/sbin to ${sys.workdir}/bin";

  reports:

    binaries_fresh.!binaries_rotten.!binaries_missing::
      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@Binaries update@@None@@${g.execRun}##${g.uuid}@#The CFengine binaries in ${sys.workdir}/bin are up to date";

    binaries_rotten.!binaries_missing::
      "@@Common@@result_repaired@@hasPolicyServer-root@@common-root@@00@@Binaries update@@None@@${g.execRun}##${g.uuid}@#The CFengine binaries have been updated in ${sys.workdir}/bin";

    binaries_missing::
      "@@Common@@result_error@@hasPolicyServer-root@@common-root@@00@@Binaries update@@None@@${g.execRun}##${g.uuid}@#An error occurred while updating the CFengine binaries in ${sys.workdir}/bin";

    android::
      "@@Common@@result_success@@hasPolicyServer-root@@common-root@@00@@Binaries update@@None@@${g.execRun}##${g.uuid}@#This is an android machine: no CFEngine binaries update needed";

    nova_edition::
      "@@Common@@result_na@@hasPolicyServer-root@@common-root@@00@@Binaries update@@None@@${g.execRun}##${g.uuid}@#This is an CFEngine enterprise system: binaries update are handled differently";


}

#######################################################

body agent control
{
    # if default runtime is 5 mins we need this for long jobs
        ifelapsed => "1";

    #define here some environment variables
        environment => { "DEBIAN_FRONTEND=noninteractive" };

        abortclasses => { "should_not_continue", "could_not_download_uuid" };

        agentfacility => "LOG_LOCAL6";

  # Repository where to put the copy of modified files
    !windows::
        default_repository => "/var/rudder/modified-files";

    # we can not depend on DNS for mobile devices or NATed device
    any::
        skipidentify => "true";
}

#######################################################

body executor control
{
        splaytime => "1";

        schedule         => { "Min00", "Min05", "Min10", "Min15", "Min20", "Min25", "Min30", "Min35", "Min40", "Min45", "Min50", "Min55" };
        executorfacility => "LOG_DAEMON";

  windows::
        # CFEngine best practice is to use full paths on Windows
        exec_command => "${sys.cf_agent} -f \"${sys.workdir}\inputs\failsafe.cf\" & ${sys.cf_agent}";

  !windows::
        exec_command => "${sys.cf_agent} -f failsafe.cf && ${sys.cf_agent}";

}

########################################################

#Enforce that the file only contains this information
bundle edit_line enforce_content(str)
{

  delete_lines:
      "${str}" not_matching => "true";

  insert_lines:
      "${str}";
}

body process_count system_check_process_count(name, max, min)
{
        match_range => irange("${min}","${max}");
        out_of_range_define => { "${name}_is_defective" };
}
