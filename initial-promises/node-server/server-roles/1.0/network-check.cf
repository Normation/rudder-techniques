#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

bundle agent root_networks_check
{

  vars:

      "acl_generate_22"  string => join("${const.n}Allow from ","def.acl");
      "acl_generate_24"  string => join("${const.n}Require ip ","def.acl");

      "network_file[22]" string => "${g.rudder_base}/etc/rudder-networks.conf";
      "network_acl[22]"  string => "Allow from ${acl_generate_22}";

      "network_file[24]" string => "${g.rudder_base}/etc/rudder-networks-24.conf";
      "network_acl[24]"  string => "Require ip ${acl_generate_24}";

      "index"             slist => getindices("network_file");

    redhat::
      "apache_service" string => "httpd";

    !redhat::
      "apache_service" string => "apache2";

  files:

      "${network_file[${index}]}"
        create        => "true",
        perms         => mog("644", "root", "root"),
        edit_defaults => empty_backup,
        edit_line     => insert_lines("${network_acl[${index}]}"),
        classes       => kept_if_else("rudder_networks_ok", "rudder_networks_repaired","rudder_networks_failed"),
        comment       => "Copying rudder apache configuration";

  commands:

    rudder_networks_repaired::

      "${paths.path[service]}"
        args => "${apache_service} reload",
        classes => if_else("apache_reloaded", "apache_reload_failed");

  reports:

    cfengine::

      "@@server-roles@@result_success@@server-roles@@server-roles-directive@@0@@Check allowed networks configuration@@None@@${g.execRun}##${g.uuid}@#The Rudder allowed networks configuration is OK"
        ifvarclass => "rudder_networks_ok.!rudder_networks_repaired.!rudder_networks_failed";

      "@@server-roles@@result_repaired@@server-roles@@server-roles-directive@@0@@Check allowed networks configuration@@None@@${g.execRun}##${g.uuid}@#The Rudder allowed networks configuration has been corrected"
        ifvarclass => "rudder_networks_repaired.!rudder_networks_failed";

      "@@server-roles@@result_error@@server-roles@@server-roles-directive@@0@@Check allowed networks configuration@@None@@${g.execRun}##${g.uuid}@#The Rudder allowed networks configuration was NOT edited because of an error"
        ifvarclass => "rudder_networks_failed";

      "@@server-roles@@log_info@@server-roles@@server-roles-directive@@0@@Check allowed networks configuration@@None@@${g.execRun}##${g.uuid}@#Apache has been reloaded successfully"
        ifvarclass => "apache_reloaded.!apache_reload_failed";

      "@@server-roles@@result_error@@server-roles@@server-roles-directive@@0@@Check allowed networks configuration@@None@@${g.execRun}##${g.uuid}@#Apache failed to reload"
        ifvarclass => "apache_reload_failed";

}
