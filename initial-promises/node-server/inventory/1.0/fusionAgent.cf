#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

#
# This file launch a fusion-inventory agent
# inventory in local.
# If fusion agent is not installed,
# the installation is done
#
# Then the inventory file is improved with external informations (UUID, cf-key, VMs)


bundle agent doInventory
{
  vars:

    # If curl is available, use it
    !windows.curl_installed::
      "download_command"   string => "${g.rudder_curl} -L -k -1 -s -f --proxy '' -o \"${sys.workdir}/rudder-server-uuid.txt\" ${g.inventory_upload_protocol}://${server_info.cfserved}/uuid";

    # If not, use minicurl instead
    !windows.!curl_installed::
      "download_command"   string => "${g.minicurl} --no-verify --get --file \"${sys.workdir}/rudder-server-uuid.txt\" --url ${g.inventory_upload_protocol}://${server_info.cfserved}/uuid";

    # On windows, always use curl
    windows::
      "download_command"   string => "\"${g.rudder_base_sbin}\curl\curl.exe\" -L -k -1 -s -f --noproxy '${server_info.cfserved}' -o \"${sys.workdir}\rudder-server-uuid.txt\" http://${server_info.cfserved}/uuid";

    uuid_succesfully_downloaded::
      "policy_server_uuid" string => readfile("${sys.workdir}/rudder-server-uuid.txt", 50);

  classes:

    # The force_inventory class may be specified by the user at runtime, or defined here
      "force_inventory" expression => fileexists("${g.rudder_base}/etc/force_inventory");

    uuid_succesfully_downloaded::
      "uuid_valid" expression => regcmp("[a-z0-9-]+","${policy_server_uuid}");
      "uuid_validity_checked"
        expression => "any",
        comment    => "This dummy class is just used for ordering the report using !uuid_valid below";

  methods:

    uuid_valid.(!inventory_sent|force_inventory)::

      "any" usebundle => fusionAgent;
      "any" usebundle => listInstalledVM;
      "any" usebundle => generateExtraInformations;
      "any" usebundle => turnUsersToUnicode;
      "any" usebundle => addInformationsToInventory;
      "any" usebundle => moveInventoryToFinalDestination;
      "any" usebundle => signInventories;
      "any" usebundle => compressInventories;
      "any" usebundle => sendInventory;
      "any" usebundle => cleanForceInventoryFlagFile;

  commands:

      "${download_command}"
        comment => "Getting the uuid from the server",
        classes => if_else("uuid_succesfully_downloaded","could_not_download_uuid");

  reports:
    could_not_download_uuid::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not retrieve the UUID of the policy server";

    uuid_succesfully_downloaded.uuid_validity_checked.!uuid_valid::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not retrieve a valid UUID from the policy server";

           # Send reports to confirm this PT's success even if we don't need to send an inventory
    inventory_sent::
      "@@Inventory@@log_info@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#An inventory was already sent less than 8 hours ago";

    !(Night.splaying).!force_inventory::
      "@@Inventory@@result_success@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Next inventory scheduled between 00:00 and 06:00";
}

bundle common inventory
{
  vars:
    windows::
    # Files names
      "UserListFile_cp" string => "\"${g.rudder_var_tmp}\UserList.tmp\"";
      "UserListFile" string => "\"${g.rudder_var_tmp}\UserList.list\"";

    any::
      "CPUIDFile" string => "${g.rudder_var_tmp}/cpuid.arc";

  classes:

    windows::

      "rudder_inventory_cpuid_tool_present"    expression => fileexists("\"${g.rudder_tools}\cpuid-windows-V1.0.vbs\"");

      "rudder_inventory_userlist_tool_present" expression => fileexists("${g.rudder_tools}\userlist.bat");

    !windows::

      "rudder_inventory_cpuid_tool_present"    expression => fileexists("${g.rudder_tools}/cpuid-linux-V1.0.sh");

}

bundle agent fusionAgent {

  vars:
    SuSE.xen_dom0::
      "xen_tools_package" string => "xen-tools";
    SuSE.xen_domu_pv::
      "xen_tools_package" string => "xen-tools-domU";
    debian::
      "xen_tools_package" string => "xenstore-utils";
    (redhat|centos)::
      "xen_tools_package" string => "xen";

    !windows::
      "fusion_inventory_version" string => execresult("${g.rudder_base}/bin/run-inventory --version | ${paths.path[grep]} '[0-9]\.[0-9]' | ${paths.path[sed]} 's%.*(\([0-9]\+\)\.\([0-9]\+\).*).*%\1\2%'", "useshell");
      "inventory_path"           string => "${g.rudder_var_tmp}/inventory", policy => "overridable"; # Default value
      "inventory_path_edition"   string => "${g.rudder_var_tmp}/inventory/.*.ocs", policy => "overridable"; # Default value for editing the inventory files

    !windows.fusion_inventory_version_23_or_later::
      # FusionInventory 2.3+ permits to specify the exact inventory file name we want
      "inventory_path"           string => "${g.rudder_var_tmp}/inventory/${sys.uqhost}-${g.uuid}.ocs";
      "inventory_path_edition"   string => "${g.rudder_var_tmp}/inventory/${sys.uqhost}-${g.uuid}.ocs";

    windows:: # We assume we always have FusionInventory 2.3+ on Windows
      "inventory_path"           string => "${g.rudder_var_tmp}\inventory\${sys.uqhost}-${g.uuid}.ocs";
      "inventory_path_edition"   string => "${g.rudder_var_tmp}\inventory\${sys.uqhost}-${g.uuid}.ocs";

  classes:
    !windows::
      # CFEngine doesn't have a ">=" operator, so I'm using "! <" instead
      "fusion_inventory_version_23_or_later" not => islessthan("${fusion_inventory_version}", "23");

  files:
    !windows|cygwin::
      "${g.rudder_var_tmp}/inventory/."
        create => "true",
        comment => "Creating inventory directory",
        classes => if_ok("inventoryfoldercreated");

      "${g.rudder_var_reports}/."
        create => "true";

    windows.!cygwin::
      "${g.rudder_var_tmp}\inventory\."
        create => "true",
        comment => "Creating inventory directory",
        classes => if_ok("inventoryfoldercreated");

      "${g.rudder_var_reports}\."
        create => "true";

  packages:
    xen::
      "${xen_tools_package}"
        package_policy => "add",
        package_method => generic,
        classes        => cf2_if_else("xen_installed", "cant_install_xen"),
        comment        => "Installing xen package for extended data";

  commands:
    !windows.inventoryfoldercreated::
      "${g.rudder_base}/bin/run-inventory --local=${inventory_path} --scan-homedirs"
        classes => cf2_if_else("run_inventory", "inventory_failed"),
        comment => "Generating inventory, in the temporary folder";

    windows::	    
      "\"c:\Program Files\Rudder\sbin\run-inventory.bat\""
        args => "--local=\"${inventory_path}\" --scan-homedirs 2>nul",
        contain => in_shell,
        classes => cf2_if_else("run_inventory", "inventory_failed"),
        comment => "Generating inventory";
			 			
  reports:
    run_inventory::
      "@@Inventory@@log_debug@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Running inventory";
			
    inventory_failed::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not execute the inventory";
			
    cant_install_curl::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not install curl";
			
    cant_install_ocs::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not install ocs";
			
    curl_installed::
      "@@Inventory@@log_info@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Curl installed";

    cant_install_xen::
      "@@Inventory@@result_error@@hasPolicyServer-root@@common-root@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not install xen utils on xen systems";

    xen_installed::
      "@@Inventory@@log_info@@hasPolicyServer-root@@common-root@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Xen utils installed";
			
}

# List all installed VM on the machine (based on VirtualBox)
# CAUTION : Issue with path containing a whitespace, it's not working with windows
bundle agent listInstalledVM
{
  files:
    VirtualBoxInstalled::
      "${virtualMachines.VBoxListFile}"
        create => "true",
        edit_line => xmlify(${virtualMachines.VBoxAttr}),
        comment => "Converting file into pseudo XML";

    VMWareInstalled::
      "${virtualMachines.VMWareListFile}"
        create => "true",
        edit_line => xmlify(${virtualMachines.VMWareAttr}),
        comment => "Converting file into pseudo XML";


  commands:
    linux.VirtualBoxInstalled::
      "/usr/bin/VBoxManage"
        args => "-q list vms > ${virtualMachines.VBoxListFile}",
        contain => outputable,
        classes => cf2_if_else("vb_listed", "cant_list_vb"),
        comment => "Generating file with list of VM";


    windows.VirtualBoxInstalled::
      "\"${virtualMachines.virtual_box_install_path}VBoxManage.exe\""
        args => "-q list vms > \"${virtualMachines.VBoxListFile}\"",
        contain => outputable,
        classes => cf2_if_else("vb_listed", "cant_list_vb"),
        comment => "Generating file with list of VM";

    linux.VMWareInstalled::
      "${virtualMachines.VMWareScript}"
        contain => outputable,
        args => " > ${virtualMachines.VMWareListFile}",
        classes => cf2_if_else("vm_listed", "cant_list_vm"),
        comment => "Generating file with list of VM";


    windows.VMWareInstalled::
      "${virtualMachines.VMWareScript}"
        contain => outputable,
        args => " > \"${virtualMachines.VMWareListFile}\"",
        classes => cf2_if_else("vm_listed", "cant_list_vm"),
        comment => "Generating file with list of VM";

  reports:
    cant_list_vm::
      "@@Inventory@@log_warn@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not list installed VMWare machines";

    cant_list_vb::
      "@@Inventory@@log_warn@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not list installed VirtualBox machines";
}

bundle agent generateExtraInformations
{
  commands:
    windows.rudder_inventory_userlist_tool_present::
      "\"${g.rudder_tools}\userlist.bat\""
        args => " > ${inventory.UserListFile_cp} ",
        contain => outputable,
        classes => cf2_if_else("userlist", "userlist_fail"),
        comment => "Generating file with list of users";

    windows.rudder_inventory_cpuid_tool_present::
      "${sys.winsysdir}\cscript.exe"
        args => "/Nologo \"${g.rudder_tools}/cpuid-windows-V1.0.vbs\" > \"${inventory.CPUIDFile}\"",
        contain => outputable,
        classes => cf2_if_else("cpuid", "cpuid_fail"),
        comment => "Generating file with CPUID information";

    linux.rudder_inventory_cpuid_tool_present::
      "${g.rudder_tools}/cpuid-linux-V1.0.sh"
        args => " > ${inventory.CPUIDFile}",
        contain => outputable,
        classes => cf2_if_else("cpuid", "cpuid_fail"),
        comment => "Generating file with CPUID information";

    android::
      "${g.rudder_tools}/cpuid-android-V1.0.sh"
        args => " > ${inventory.CPUIDFile}",
        contain => outputable,
        classes => cf2_if_else("cpuid", "cpuid_fail"),
        comment => "Generating file with CPUID information";


  reports:
    userlist::
      "@@Inventory@@log_debug@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Generated the userlist";
    cpuid::
      "@@Inventory@@log_debug@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Generated the CPUID";


    userlist_fail::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not generate the user list";

    cpuid_fail::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not generate the cpuid";

    !rudder_inventory_userlist_tool_present::

      "@@Inventory@@log_debug@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#The user list generation tool is not present yet. Skipping...";

    !rudder_inventory_cpuid_tool_present::

      "@@Inventory@@log_debug@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#The CPUID generation tool is not present yet. Skipping...";

}

bundle agent turnUsersToUnicode
{

  commands:
    windows::
      "\"${g.rudder_tools}\iconv.exe\""
        args => " -f CP850 -t UTF-8 ${inventory.UserListFile_cp} > ${inventory.UserListFile} ",
        contain => outputable_dir("${g.rudder_tools}"),
        classes => cf2_if_else("userlist", "userlist_fail"),
        comment => "Generating file with list of users in UTF";

  reports:

    windows::
      "@@Inventory@@log_debug@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#This is a windows machine. User list has been converted to Unicode";
}


# adding data to the inventory :
# UUID and CFKey in <DEVICEID>,
# list of VM in <CONTENT>
bundle agent addInformationsToInventory
{
  vars:
    windows.!cygwin::
      "CFKEY" string => execresult("${sys.winsysdir}\cmd.exe /c \"type \"${sys.workdir}\ppkeys\localhost.pub\"\"", "noshell");
      "USER" string => getenv("USERNAME", 40);
      "RUDDERUUID" string => execresult("${sys.winsysdir}\cscript.exe /Nologo \"${g.rudder_tools}/uuid.vbs\"","noshell");
      "polserv_uuid" string => readfile( "${sys.workdir}\rudder-server-uuid.txt" , "50" );
      # Somehow, using the variable rather than the path fails with readstringlist
      "users" slist => { readstringlist("C:\Program Files\Rudder\var\tmp\UserList.list","#.*","[\n| |\r]",50,4000) };

    cygwin::
      "mywinpath" string => execresult("/usr/bin/echo $WINDIR ", "useshell");
      "CFKEY" string => execresult("/usr/bin/cat ${sys.workdir}/ppkeys/localhost.pub", "noshell");
      "USER" string => execresult("/usr/bin/whoami", "noshell");
      "RUDDERUUID" string => execresult("${sys.winsysdir}\cscript.exe /Nologo ${g.rudder_tools}/uuid.vbs","noshell");
      "polserv_uuid" string => readfile( "${sys.workdir}/rudder-server-uuid.txt" , "50" );

      "users" slist => { readstringlist("${inventory.UserListFile}","#.*","[\n| |\r]",10,4000) };

    xen.SuSE.xen_domu_pv::
      "VMRUDDERUUID" string => execresult("/bin/xenstore-read vm","noshell");

    xen.(centos|redhat|(SuSE.xen_dom0))::
      "VMRUDDERUUID" string => execresult("/usr/bin/xenstore-read vm","noshell");

    xen.(!SuSE.!centos.!redhat)::
      "VMRUDDERUUID" string => execresult("/usr/sbin/xenstore-read vm","noshell");

    xen.xenrudderuuid::
      "RUDDERUUID" string => "${vmarray[1]}";

    linux.!xen::
      "RUDDERUUID" string => execresult("/usr/sbin/dmidecode -s system-uuid","noshell");

    aix::
      "RUDDERUUID" string => execresult("/usr/bin/uname -f", "noshell");

    !windows.!android::
      "CFKEY" string => execresult("/bin/cat ${sys.workdir}/ppkeys/localhost.pub", "noshell");
      "USER" string => execresult("/usr/bin/whoami", "noshell");
      "usersnumber" int =>  readstringarray("userslist","/etc/passwd","#[^\n]*",":",50,16000);
      "users" slist => getindices("userslist");

    !windows::
      "polserv_uuid"          string => readfile( "${sys.workdir}/rudder-server-uuid.txt" , "50" );

    android::
      "RUDDERUUID"            string => execresult("/system/xbin/sqlite3 /data/data/com.android.providers.settings/databases/settings.db \"select value from secure where name = 'android_id'\"", "noshell");
      "CFKEY"                 string => execresult("/system/bin/cat ${sys.workdir}/ppkeys/localhost.pub", "noshell");
      "USER"                  string => execresult("/system/xbin/whoami", "noshell");
      "usersnumber"           int =>  "1";
      "users"                 slist => {"root"};
      "android_kernelname"    string => "linux";
      "android_kernelversion" string => execresult("/system/xbin/uname -r", "noshell");
      "android_name"          string => "Android";
      "android_version"       string => execresult("/system/bin/getprop ro.build.version.release", "noshell");
      "android_fullname"      string => "Android ${android_version}";
      "logdate"               string => execresult("/system/bin/date '+%Y-%m-%d %H:%M:%S'", "noshell");

    rudder_server_roles_dir_exists::
      # Roles of the system, fetch from the server_roles_path folder
      # Don't extract file starting by . (especially . and .., but also hidden files)
      "rudder_roles" slist => lsdir("${g.server_roles_path}", "^[^.].*", "false");

  classes:
    xen::
      "xenrudderuuid" expression => regextract("/vm/(.*)", "${VMRUDDERUUID}", "vmarray");

    any::
      "uuiddefined" expression => isvariable("RUDDERUUID");
  files:
    uuiddefined::
      "${fusionAgent.inventory_path_edition}"
        comment       => "Adding basic informations to inventory",
        edit_line     => add_information_to_inventory(${RUDDERUUID}, ${CFKEY}, ${USER}, ${polserv_uuid}),
        edit_defaults => def_no_backup;

      "${fusionAgent.inventory_path_edition}"
        comment       => "Adding users informations to inventory",
        edit_line     => add_users_information_to_inventory(@{addInformationsToInventory.users}),
        edit_defaults => def_no_backup;

    uuiddefined.rudder_server_roles_dir_exists::
      "${fusionAgent.inventory_path_edition}"
        comment       => "Adding server roles informations to inventory",
        edit_line     => add_server_roles_information_to_inventory("@{addInformationsToInventory.rudder_roles}"),
        edit_defaults => def_no_backup;

    android::
      "${g.rudder_var_tmp}/inventory/.*.ocs"
        edit_line => add_information_to_android_inventory(${android_fullname}, ${android_kernelname}, ${android_kernelversion}, ${android_name}, ${android_version}),
        edit_defaults => def_no_backup;

      "${g.rudder_var_tmp}/inventory/.*.ocs"
        edit_line => add_accesslog_to_android_inventory(${logdate}),
        edit_defaults => def_no_backup;
}

# Move the inventory file in the shared directory
bundle agent moveInventoryToFinalDestination
{
  files:
      "${g.rudder_inventories}"
        copy_from    => copy("${g.rudder_var_tmp}/inventory"),
        depth_search => recurse_visible(1),
        file_select  => by_name("@{g.inventory_file_types}"),
        comment      => "Moving inventory files to the final location";

}

# sign inventories
bundle agent signInventories
{
  vars:

    !windows::
      "sign_script" string => "/opt/rudder/bin/signature.sh";
    windows::
      "sign_script" string => "C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe -ExecutionPolicy Bypass -File \"C:\Program Files\Rudder\sbin\signature.ps1\" -file";

  classes:
      "sign_script_exists" expression => fileexists("${sign_script}");

  files:
    !windows::
      "${g.rudder_inventories}"
        transformer  => "${sign_script} \"${this.promiser}\"",
        depth_search => recurse_visible(1),
        file_select  => by_name("@{g.uncompressed_inventory_file_types}"),
        ifvarclass   => "sign_script_exists",
        comment      => "Signing inventory files";
}

# compress inventories if possible
bundle agent compressInventories
{
  files:

    !windows.gzip_installed::

      "${g.rudder_inventories}"
        transformer  => "${g.rudder_gzip} -fq ${this.promiser}",
        depth_search => recurse_visible(1),
        file_select  => by_name("@{g.uncompressed_inventory_file_types}"),
        comment      => "gzip inventory files";
}

# Send the file to the promises server
bundle agent sendInventory
{
  vars:

      "download_endpoint"         string => "${g.inventory_upload_protocol}://${server_info.cfserved}/inventories/";

    # If curl is available, use it
    !windows.curl_installed::
      "download_command_prefix"   string => "${g.rudder_curl} -L -k -1 -f -s --proxy '' --user ${g.davuser}:${g.davpw} -T";
      "download_command_suffix"   string => "${download_endpoint}";

    # If not, use minicurl instead
    !windows.!curl_installed::
      "download_command_prefix"   string => "${g.minicurl} --no-verify --put --authentication ${g.davuser}:${g.davpw} --file";
      "download_command_suffix"   string => "--url ${download_endpoint}";

    # On windows, always use curl
    windows::
      "download_command_prefix"   string => "\"${g.rudder_base_sbin}\curl\curl.exe\" -L -k -1 -f -s --noproxy '${server_info.cfserved}' --user ${g.davuser}:${g.davpw} -T";
      "download_command_suffix"   string => "${download_endpoint}";

  files:

    !windows::
      "${g.rudder_inventories}"
        transformer => "${download_command_prefix} ${this.promiser} ${download_command_suffix}",
        depth_search => recurse_visible(1),
        file_select => by_name("@{g.signed_inventory_file_types}"),
        classes => persistant_class("inventory_sent", "cant_send_inventory", 480),
        comment => "Sending the inventory to the server";

    # On windows, the this.promiser variable is not evaluated the same way. We are forced to duplicate this block
    windows::
      "${g.rudder_inventories}"
        transformer => "${download_command_prefix} \"${this.promiser}\" ${download_command_suffix}",
        depth_search => recurse_visible(1),
        file_select  => by_name("@{g.signed_inventory_file_types}"),
        classes      => persistant_class("inventory_sent", "cant_send_inventory", 480),
        comment      => "Sending the inventory to the server";

  # Once we've successfully sent all inventories, remove them
    !windows.inventory_sent.!cant_send_inventory::
      "${g.rudder_inventories}"
        transformer  => "${g.rudder_rm} -f ${this.promiser}",
        depth_search => recurse_visible(1),
        file_select  => by_name("@{g.signed_inventory_file_types}"),
        classes      => if_else("inventory_file_deleted", "cant_delete_inventory_file"),
        comment      => "Cleaning up inventory files already sent to the server";

      "${g.rudder_var_tmp}/inventory_sent"
        create       => "true",
        touch        => "true",
        comment      => "Create local info about successful upload";

      "${g.rudder_var_tmp}/inventory"
        transformer  => "${g.rudder_rm} -f ${this.promiser}",
        depth_search => recurse_visible(1),
        file_select  => by_name("@{g.signed_inventory_file_types}"),
        classes      => if_else("inventory_file_deleted", "cant_delete_inventory_file"),
        comment      => "Cleaning up inventory files already sent to the server";

  reports:
    inventory_sent::
      "@@Inventory@@result_success@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#The inventory has been successfully sent";

    cant_send_inventory::
      "@@Inventory@@result_error@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not send the inventory";

    cant_delete_inventory_file::
      "@@Inventory@@log_warn@@inventory-all@@inventory-all@@00@@inventory@@None@@${g.execRun}##${g.uuid}@#Could not delete inventory file after sending to server";

}

#####################################################
#Adding the list of Virtual Machines into the report
#Adding the ids in the report
#####################################################
bundle edit_line add_information_to_inventory(RUDDERUUID, CFKEY, USER, POLSRVUUID)
{
  insert_lines:
      "<UUID>${g.uuid}</UUID>${const.n}<USER>${USER}</USER>${const.n}<AGENTSNAME>${const.n}</AGENTSNAME>${const.n}<MACHINEID>${RUDDERUUID}</MACHINEID>${const.n}<CFKEY>${CFKEY}</CFKEY>${const.n}<POLICY_SERVER>${POLSRVUUID}</POLICY_SERVER>${const.n}<SERVER_ROLES>${const.n}</SERVER_ROLES>${const.n}"
        location    => after_deviceid,
        insert_type => "preserve_block",
        comment     => "Add the UUID and CFKEY tags in the inventory file";

    any::
      "<VMS>${const.n}</VMS>${const.n}<USERSLIST>${const.n}</USERSLIST>"
        insert_type => "preserve_block",
        location    => after_content;

    rudder_inventory_cpuid_tool_present::

      "${inventory.CPUIDFile}"
        insert_type => "file",
        location => after_location("<POLICY_SERVER>"),
        comment => "Adding the CPUID data in the inventory file";

    nova_edition::
      "<AGENTNAME>Nova</AGENTNAME>"
        location => after_location("<AGENTSNAME>"),
        comment => "Adding the agent data in the inventory file";

    community_edition::
      "<AGENTNAME>Community</AGENTNAME>"
        location => after_location("<AGENTSNAME>"),
        comment => "Adding the agent data in the inventory file";

    VirtualBoxInstalled::
      "${virtualMachines.VBoxListFile}"
        insert_type => "file",
        location => after_location("<VMS>"),
        comment => "Adding the list of VM in the inventory file";

    VMWareInstalled::
      "${virtualMachines.VMWareListFile}"
        insert_type => "file",
        location => after_vm,
        comment => "Adding the list of VM in the inventory file";
}

bundle edit_line add_information_to_android_inventory(fullname, kernelname, kernelversion, name, version)
{
  insert_lines:

    android::
      "<OPERATINGSYSTEM>${const.n}<FULL_NAME>${fullname}</FULL_NAME>${const.n}<KERNEL_NAME>${kernelname}</KERNEL_NAME>${const.n}<KERNEL_VERSION>${kernelversion}</KERNEL_VERSION>${const.n}<NAME>${name}</NAME>${const.n}<VERSION>${version}</VERSION>${const.n}</OPERATINGSYSTEM>"
        location    => after_location("<CONTENT>"),
        insert_type => "preserve_block",
        comment     => "Adding the list of OPERATINGSYSTEM part";
}

#this bundle is necessary for OCSInventory (but not for fusioninventory)
bundle edit_line add_accesslog_to_android_inventory(logdate)
{
  insert_lines:
    android::
      "<ACCESSLOG><LOGDATE>${logdate}</LOGDATE></ACCESSLOG>"
        location => after_location("</OPERATINGSYSTEM>"),
        comment => "Adding log date";
}


bundle edit_line add_users_information_to_inventory(userlist)
{
  insert_lines:

    (windows.rudder_inventory_userlist_tool_present)|!windows::

      "<USER>${userlist}</USER>${const.n}" location => after_users,
        comment => "Add the UUID and CFKEY tags in the inventory file";
}

bundle edit_line add_server_roles_information_to_inventory(server_roles)
{
  insert_lines:
      "<SERVER_ROLE>${server_roles}</SERVER_ROLE>"
        location => after_location("<SERVER_ROLES>"),
        comment  => "Adding server role to inventory";
}


#Locators
body location after_location(pos)
{
        select_line_matching => ".*${pos}.*";
        before_after => "after";
}

body location after_deviceid
{
        select_line_matching => ".*<DEVICEID>.*";
        before_after => "after";
}

body location after_content
{
        select_line_matching => ".*<CONTENT>.*";
        before_after => "after";
}
body location after_vm
{
        select_line_matching => ".*<VMS>.*";
        before_after => "after";
}
body location after_users
{
        select_line_matching => ".*<USERSLIST>.*";
        before_after => "after";
}

###############
# Editors
##############
# Convert a simple list in <VM TYPe="vmtype"><NAME>machine_name</NAME><UUID>value<UUID></VM>
bundle edit_line xmlify(ATTR)
{
  replace_patterns:
      "\"(.*)\" \{(.*)\}"
      replace_with=> xmled(${ATTR});

}

body replace_with xmled(attribute)
{
        replace_value => "<VM TYPE=\"${attribute}\"><NAME>${match.1}</NAME><UUID>${match.2}</UUID></VM>";
}

body perms inventory_perms
{
        mode => "0700";
}


body file_select one_day_age
#
# we can build old "include", "exclude", and "ignore"
# from these as standard patterns - these bodies can
# form a library of standard patterns
#

{
        mtime     => irange(ago(1,0,0,0,0,0),ago(0,0,1,0,0,0));
        file_result => "mtime";
}

bundle agent cleanForceInventoryFlagFile
{

  files:
      "${g.rudder_base}/etc/force_inventory"
        delete     => tidy,
        ifvarclass => "inventory_sent"; # if the force inventory file was present, and we successfully sent an inventory, clean up the flag file

}
